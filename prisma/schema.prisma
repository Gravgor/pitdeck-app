generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                            String            @id @default(cuid())
  name                                          String?           @unique
  email                                         String?           @unique
  emailVerified                                 DateTime?
  image                                         String?
  password                                      String?
  coins                                         Int               @default(1000)
  createdAt                                     DateTime          @default(now())
  updatedAt                                     DateTime          @updatedAt
  level                                         Int               @default(1)
  totalXp                                       Int               @default(0)
  xp                                            Int               @default(0)
  lastLogin                                     DateTime?         @default(now())
  lastActive                                    DateTime?         @default(now())
  completedMilestones                           Json?
  needUsernameSetup                             Boolean           @default(false)
  accounts                                      Account[]
  Activity                                      Activity[]
  listings                                      Listing[]
  lastLocation                                  Location?
  Notification_Notification_relatedUserIdToUser Notification[]    @relation("Notification_relatedUserIdToUser")
  notifications                                 Notification[]
  createdQuests                                 Quest[]           @relation("QuestCreator")
  sessions                                      Session[]
  receivedTrades                                Trade[]           @relation("ReceivedTrades")
  sentTrades                                    Trade[]           @relation("SentTrades")
  achievements                                  UserAchievement[]
  locations                                     UserLocation?
  quests                                        UserQuest[]
  discoveries                                   Drop[]            @relation("DropToUser")
  packsPurchased                                Pack[]            @relation("PackToUser")
  cards                                         Card[]            @relation("UserCards")
  User_A                                        User[]            @relation("UserFollows")
  User_B                                        User[]            @relation("UserFollows")
}

model UserLocation {
  id        String   @id @default(cuid())
  userId    String   @unique
  latitude  Float
  longitude Float
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([updatedAt])
}

model Activity {
  id          String       @id @default(cuid())
  userId      String
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id               String            @id @default(cuid())
  title            String
  description      String
  type             AchievementType
  imageUrl         String
  requirement      Int
  xpReward         Int
  rarity           AchievementRarity
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  progress      Int         @default(0)
  unlockedAt    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Notification {
  id                                    String           @id @default(cuid())
  userId                                String
  type                                  NotificationType
  message                               String
  metadata                              Json?
  createdAt                             DateTime         @default(now())
  read                                  Boolean          @default(false)
  relatedUserId                         String?
  updatedAt                             DateTime?
  User_Notification_relatedUserIdToUser User?            @relation("Notification_relatedUserIdToUser", fields: [relatedUserId], references: [id])
  user                                  User             @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([read])
  @@index([relatedUserId])
  @@index([userId])
}

model Location {
  id        String   @id @default(cuid())
  latitude  Float
  longitude Float
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Drop {
  id           String   @id @default(cuid())
  type         DropType
  rarity       Rarity
  latitude     Float
  longitude    Float
  circuitId    String?
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  circuit      Circuit? @relation(fields: [circuitId], references: [id])
  rewards      Reward[]
  discoveredBy User[]   @relation("DropToUser")
}

model Reward {
  id        String     @id @default(cuid())
  type      RewardType
  amount    Int
  dropId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cardId    String?
  card      Card?      @relation(fields: [cardId], references: [id])
  drop      Drop       @relation(fields: [dropId], references: [id])
}

model Circuit {
  id          String   @id @default(cuid())
  name        String
  country     String
  latitude    Float
  longitude   Float
  length      Float
  corners     Int
  description String
  imageUrl    String
  tier        Int
  dropRate    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  drops       Drop[]
  events      Event[]
}

model Event {
  id          String   @id @default(cuid())
  name        String
  circuitId   String
  startDate   DateTime
  endDate     DateTime
  series      String
  description String
  dropRate    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  circuit     Circuit  @relation(fields: [circuitId], references: [id])
}

model Card {
  id                   String          @id @default(cuid())
  name                 String
  type                 CardType
  rarity               Rarity
  imageUrl             String
  description          String?
  edition              String?
  serialNumber         String?
  packId               String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  series               String
  stats                Json?
  year                 Int
  championshipDetails  Json?
  eventDetails         Json?
  historicDetails      Json?
  isPromotional        Boolean         @default(false)
  promotionalDetails   Json?
  seasonDetails        Json?
  seasonalDetails      Json?
  isForSale            Boolean         @default(false)
  isForTrade           Boolean         @default(false)
  eventId              String?
  isExclusive          Boolean         @default(false)
  isQuestLocked        Boolean         @default(false)
  questLockExpiry      DateTime?
  pack                 Pack?           @relation(fields: [packId], references: [id])
  listing              Listing?
  questRewards         QuestReward[]
  Reward               Reward[]
  lockedForQuests      UserQuestCard[]
  Trade_OfferedCards   Trade[]         @relation("OfferedCards")
  Trade_RequestedCards Trade[]         @relation("RequestedCards")
  owners               User[]          @relation("UserCards")
}

model Listing {
  id        String        @id @default(cuid())
  price     Int
  status    ListingStatus
  cardId    String        @unique
  sellerId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  card      Card          @relation(fields: [cardId], references: [id])
  seller    User          @relation(fields: [sellerId], references: [id])
}

model Trade {
  id                  String   @id @default(cuid())
  senderId            String
  receiverId          String
  coinsOffered        Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  status              String   @default("PENDING")
  receiver            User     @relation("ReceivedTrades", fields: [receiverId], references: [id])
  sender              User     @relation("SentTrades", fields: [senderId], references: [id])
  Card_OfferedCards   Card[]   @relation("OfferedCards")
  Card_RequestedCards Card[]   @relation("RequestedCards")

  @@index([receiverId])
  @@index([senderId])
}

model Pack {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  price              Int
  type               PackType
  imageUrl           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  cardsPerPack       Int
  dropRates          Json
  guaranteedRarities Rarity[]
  cardTypeFilter     String?
  driverFilter       String?
  eventFilter        String?
  isLimited          Boolean  @default(false)
  isPromotional      Boolean  @default(false)
  limitedQuantity    Int?
  seriesFilter       String?
  teamFilter         String?
  yearFilter         Int?
  cards              Card[]
  purchasedBy        User[]   @relation("PackToUser")
}

model Contact {
  id        String          @id @default(cuid())
  name      String
  email     String
  category  ContactCategory
  subject   String
  message   String
  status    ContactStatus   @default(PENDING)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Quest {
  id           String        @id @default(cuid())
  type         QuestType
  status       QuestStatus   @default(ACTIVE)
  title        String
  description  String
  driverId     String?
  category     String?
  rewardCoins  Int           @default(0)
  rewardXp     Int           @default(0)
  requirements Json
  startDate    DateTime      @default(now())
  endDate      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  creatorId    String
  creator      User          @relation("QuestCreator", fields: [creatorId], references: [id])
  rewardCards  QuestReward[]
  participants UserQuest[]
}

model UserQuest {
  id          String          @id @default(cuid())
  userId      String
  questId     String
  status      UserQuestStatus @default(IN_PROGRESS)
  progress    Json
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  quest       Quest           @relation(fields: [questId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  lockedCards UserQuestCard[]

  @@unique([userId, questId])
}

model UserQuestCard {
  id          String    @id @default(cuid())
  userQuestId String
  cardId      String
  lockedUntil DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  card        Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  userQuest   UserQuest @relation(fields: [userQuestId], references: [id], onDelete: Cascade)

  @@unique([userQuestId, cardId])
  @@index([lockedUntil])
}

model QuestReward {
  id        String   @id @default(cuid())
  questId   String
  cardId    String
  amount    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  quest     Quest    @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@unique([questId, cardId])
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  status    String   @default("pending") // pending, approved, rejected
  source    String?  // track where the signup came from
  notes     String?
}

enum ActivityType {
  TRADE
  PACK_OPENED
  ACHIEVEMENT
  FOLLOW
  COLLECTION_UPDATE
}

enum AchievementType {
  TRADES_COMPLETED
  PACKS_OPENED
  CARDS_COLLECTED
  LEGENDARY_CARDS
  FOLLOWERS_GAINED
  SERIES_COMPLETED
  DAILY_LOGIN
  COLLECTION_VALUE
}

enum AchievementRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum NotificationType {
  FOLLOW
  TRADE_OFFER
  TRADE_ACCEPTED
  TRADE_DECLINED
  ACHIEVEMENT_UNLOCKED
  LEVEL_UP
  NEW_PACK
  SYSTEM_ANNOUNCEMENT
  COLLECTION_MILESTONE
  CARD_LISTED
  CARD_SOLD
  RARE_CARD_OBTAINED
  FOLLOWERS_GAINED
  QUEST_COMPLETED
  QUEST_EXPIRED
  QUEST_FAILED
  QUEST_CANCELLED
  PACK_OPENED
  PACK_PURCHASED
}

enum DropType {
  STANDARD
  CIRCUIT
  EVENT
  DAILY
  ACHIEVEMENT
}

enum RewardType {
  PACK
  CARD
  COINS
  SPECIAL_ITEM
}

enum CardType {
  F1_DRIVER
  F2_DRIVER
  F3_DRIVER
  WEC_DRIVER
  INDYCAR_DRIVER
  NASCAR_DRIVER
  F1_CAR
  F2_CAR
  F3_CAR
  WEC_CAR
  INDYCAR_CAR
  NASCAR_CAR
  CIRCUIT
  HISTORIC_MOMENT
  TEAM
  PROMOTIONAL
  EVENT
  CHAMPIONSHIP
  SEASONAL
  LEGENDARY_HISTORIC
}

enum Rarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum ListingStatus {
  ACTIVE
  SOLD
  CANCELLED
}

enum TradeStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum PackType {
  STANDARD
  PREMIUM
  LEGENDARY
  SPECIAL_EDITION
}

enum ContactCategory {
  GENERAL
  TECHNICAL
  BILLING
  PARTNERSHIP
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum QuestType {
  MERGE_CARDS
  COLLECT_SERIES
  DRIVER_SPECIFIC
  SPECIAL_EVENT
  DAILY
  WEEKLY
}

enum QuestStatus {
  DRAFT
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}

enum UserQuestStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  ABANDONED
}
